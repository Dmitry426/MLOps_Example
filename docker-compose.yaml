networks:
  prefect-server:
    name: prefect-server
services:
  apollo:
    command: bash -c "./post-start.sh && npm run serve"
    depends_on:
      graphql:
        condition: service_started
      hasura:
        condition: service_started
    environment:
      GRAPHQL_SERVICE_HOST: http://graphql
      GRAPHQL_SERVICE_PORT: 4201
      HASURA_API_URL: http://hasura:3000/v1alpha1/graphql
      PREFECT_API_HEALTH_URL: http://graphql:4201/health
      PREFECT_API_URL: http://graphql:4201/graphql/
      PREFECT_SERVER__TELEMETRY__ENABLED: "true"
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 1s
      test: curl --fail --silent "http://apollo:4200/.well-known/apollo/server-health"
        &> /dev/null || exit 1
      timeout: 2s
    image: prefecthq/apollo:core-1.2.2
    networks:
      prefect-server: null
    ports:
    - 127.0.0.1:4200:4200/tcp
    restart: always
  graphql:
    command: bash -c "prefect-server database upgrade -y && python src/prefect_server/services/graphql/server.py"
    depends_on:
      hasura:
        condition: service_started
    environment:
      PREFECT_CORE_VERSION: 1.2.2
      PREFECT_SERVER_DB_CMD: prefect-server database upgrade -y
      PREFECT_SERVER__DATABASE__CONNECTION_URL: postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB
      PREFECT_SERVER__HASURA__ADMIN_SECRET: hasura-secret-admin-secret
      PREFECT_SERVER__HASURA__HOST: hasura
    healthcheck:
      interval: 20s
      retries: 60
      start_period: 1s
      test: curl --fail --silent "http://graphql:4201/health" &> /dev/null || exit
        1
      timeout: 2s
    image: prefecthq/server:core-1.2.2
    networks:
      prefect-server: null
    ports:
    - 127.0.0.1:4201:4201/tcp
    restart: always
  hasura:
    command: graphql-engine serve
    depends_on:
      postgres:
        condition: service_started
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_LOG_LEVEL: warn
      HASURA_GRAPHQL_QUERY_PLAN_CACHE_SIZE: 100
      HASURA_GRAPHQL_SERVER_PORT: '3000'
      HASURA_GRAPHQL_V1_BOOLEAN_NULL_COLLAPSE: "true"
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 1s
      test: wget -O - http://hasura:$${HASURA_GRAPHQL_SERVER_PORT}/healthz &>/dev/null
        || exit 1
      timeout: 2s
    image: hasura/graphql-engine:v2.1.1
    init: true
    networks:
      prefect-server: null
    ports:
    - 127.0.0.1:3000:3000/tcp
    restart: always
  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
    - published: 5050
      target: 80
    restart: always
    networks:
      prefect-server: null
  postgres:
    command:
    - postgres
    - -c
    - max_connections=150
    volumes:
    - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 2s
      test: pg_isready -q -d $POSTGRES_DB -U $POSTGRES_USER || exit 1
      timeout: 2s
    image: postgres:latest
    networks:
      prefect-server: null
    ports:
    - 127.0.0.1:5432:5432/tcp
    restart: always
  towel:
    command: python src/prefect_server/services/towel/__main__.py
    depends_on:
      graphql:
        condition: service_started
    environment:
      PREFECT_SERVER__HASURA__ADMIN_SECRET: hasura-secret-admin-secret
      PREFECT_SERVER__HASURA__HOST: hasura
    image: prefecthq/server:core-1.2.2
    networks:
      prefect-server: null
    restart: always
  ui:
    command: /intercept.sh
    depends_on:
      apollo:
        condition: service_started
    environment:
      PREFECT_SERVER__APOLLO_URL: http://localhost:4200/graphql
    healthcheck:
      interval: 30s
      retries: 3
      test: curl --fail --silent --head "http://ui:8080/" &> /dev/null || exit 1
      timeout: 5s
    image: prefecthq/ui:core-1.2.2
    networks:
      prefect-server: null
    ports:
    - 127.0.0.1:8080:8080/tcp
    restart: always
  minio:
    restart: always
    container_name: minio
    image: minio/minio
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./storage/minio:/data
    command: server --console-address ":9001" /data
    networks:
      prefect-server: null
  mlflow:
    restart: always
    build: ./mlflow
    container_name: mlflow_server
    depends_on:
        - minio
        - postgres
    ports:
        - "5001:5000"
    environment:
        - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: mlflow server --backend-store-uri postgresql+psycopg2://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/mlflow --default-artifact-root s3://mlflow/ --host 0.0.0.0
    networks:
      prefect-server: null

version: '3.7'